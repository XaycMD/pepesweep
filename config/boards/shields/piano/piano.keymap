/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <200>;
    flavor = "hold-preferred";
};

&caps_word {
    continue-list = <UNDERSCORE MINUS>, <BACKSPACE>, <DELETE>;
};

#define AS(keycode) &as LS(keycode) keycode

// Layers
#define AL1 0
#define AL2 1
#define NUM 2
#define NAV 3
#define FUN 4
/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <30>;
            key-positions = <16 17>;
            bindings = <&kp ESC>;
        };

        combo_enter {
            timeout-ms = <30>;
            key-positions = <18 19>;
            bindings = <&kp ENTER>;
        };
    };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    //  0   1   2   3       4   5   6   7
    //  8   9   10  11      12  13  14  15
    //          16  17      18  19
    keymap {
        compatible = "zmk,keymap";

        alpha1 {
            bindings = <
                &kp Q           &as LC(C) L     &as LC(X) G     &as LC(V) D                 &as LC(Z) H     &as LC(S) U     &as LC(Y) C     &kp Y
                &mt LGUI A      &mt LALT R      &mt LSHIFT S    &mt LCTL T                  &mt RCTL N      &mt RSHIFT E    &mt RALT I      &mt RGUI O
                                                &lt NAV TAB     &lt AL2 SPC                 &lt NUM BSPC    &lt FUN DEL
            >;
        };

        alpha2 {
            bindings = <
                &kp B           &kp B           &kp G           &kp V                       &kp K           &kp M           &kp J           &kp B
                &kp Q           &kp Z           &mt LSHIFT X    &kp C                       &kp H           &mt LSHIFT D    &kp FSLH        AS(SEMI)
                                                &none           &none                       &kp COMMA       &kp DOT
            >;
        };

        num {
            bindings = <
                &kp B           &kp N1          &kp N2          &kp N3                      &kp N7          &kp N8          &kp N9          &kp B
                &kp GRAVE       &kp N4          &mt LSHIFT N5   &kp N6                      &kp N0          &mt LSHIFT LBKT &kp RBKT        AS(BSLH)
                                                &kp MINUS       &kp EQUAL                   &none           &none
            >;
        };

        nav {
            bindings = <
                &kp B           &none           &kp PG_UP        &none                      &none           &kp UP          &none           &kp B
                &none           &mt LALT HOME   &mt LSHIFT PG_DN &mt LCTL END               &mt RCTL LEFT   &mt RSHIFT DOWN &mt RALT RIGHT  &kp RPAR
                                                &none            &none                      &none           &kp LPAR
            >;
        };

        fun {
            bindings = <
                &kp B           &kp PSCRN       &kp F2          &kp F5                      &none           &caps_word      &none           &none
                &none           &kp F10         &kp F11         &kp F12                     AS(SQT)         &none           &none           &none
                                                &none           &none                       &none           &none
            >;
        };
    };
};
